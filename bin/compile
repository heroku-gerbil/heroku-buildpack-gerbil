#!/usr/bin/env bash
# -*- coding: utf-8; mode: Shell-script; fill-column: 76; tab-width: 4; -*-
# Brief: Used to perform the transformation steps on the app.
#       bin/compile BUILD_DIR CACHE_DIR ENV_DIR

# TODO only install the subset of gerbil necessary to run a binary
# TODO get the whole thing to work end-to-end

set -o errexit
set -o pipefail
#set -x

BUILD_DIR="$1"
CACHE_DIR="$2"
ENV_DIR="$3"
SHELL_DIR="$(dirname $0)"
PACK_DIR="$PWD"

ENV_FILE="${BUILD_DIR}/build.env"
if [ -f "${ENV_FILE}" ]; then
    source "${ENV_FILE}"
fi

function log_title () { echo "-----> $*"; }
function log_content () { echo "       $*"; }
function abort () { log_content "[ERROR] $*"; exit 1; }
function log_footer () { log_content "[DONE]"; }
function log_format () { sed -u 's/^/       /'; }

: "${GERBIL_VERSION:=v0.18.1}" "${USER:=heroku-gerbil}" "${TMPDIR:=$PWD/tmp}"
export GERBIL_PATH="${BUILD_DIR}/.gerbil"
export PATH="${GERBIL_PATH}/bin:${PATH}"
export LD_LIBRARY_PATH="${GERBIL_PATH}/lib:${LD_LIBRARY_PATH}"
export GERBIL_GSC="${GERBIL_PATH}/bin/gsc"
export GAMBOPT="~~=${GERBIL_PATH}"
export GERBIL_LOADPATH="${GERBIL_PATH}/lib"
export USER TMPDIR
mkdir -pv "${CACHE_DIR}" "${TMPDIR}" |& log_format
gerbil_repo=https://github.com/mighty-gerbils/gerbil

function print_environment () {
    log_title "Print environment variables ..."
    log_content "        BUILD_DIR = ${BUILD_DIR}"
    log_content "        CACHE_DIR = ${CACHE_DIR}"
    log_content "          ENV_DIR = ${ENV_DIR}"
    log_content "        SHELL_DIR = ${SHELL_DIR}"
    log_content "         PACK_DIR = ${PACK_DIR}"
    log_content "   GERBIL_VERSION = ${GERBIL_VERSION}"
    log_content "      GERBIL_HOME = ${GERBIL_HOME}"
    log_content "      GERBIL_PATH = ${GERBIL_PATH}"
    log_content "  GERBIL_LOADPATH = ${GERBIL_LOADPATH}"
    log_content "       GERBIL_GSC = ${GERBIL_GSC}"
    log_content "          GAMBOPT = ${ERBIL_GSC}"
    log_content "             PATH = ${PATH}"
    log_content "  LD_LIBRARY_PATH = ${LD_LIBRARY_PATH}"
    log_content "             HOME = ${HOME}"
    log_content "             USER = ${USER}"
    log_content "              PWD = ${PWD}"
    log_content "           TMPDIR = ${TMPDIR}"
    log_content "         \$(id -a) = $(id -a)"
    log_footer

    #log_content "Contents of PWD:"
    #ls -la ${PWD} |& log_format
    #log_content "Contents of BUILD_DIR:"
    #ls -la ${BUILD_DIR} |& log_format
    #log_content "Contents of CACHE_DIR:"
    #ls -la ${CACHE_DIR} |& log_format
    #log_content "Contents of TMPDIR:"
    #ls -la ${TMPDIR} |& log_format
    #log_footer
}

function install_gerbil_from_release () {
    log_title "Installing Gerbil ${GERBIL_VERSION} ..."

    url=${gerbil_repo}/releases/download/${GERBIL_VERSION}
    base=gerbil-${GERBIL_VERSION}-linux-x86-64
    # Install Gerbil into ${BUILD_DIR}
    wget --progress=dot:giga $url/${base}.tar.gz
    tar zxf ${base}.tar.gz
    # Install sqlite and any other missing dependency
    wget --progress=dot:giga $url/${base}-heroku-extras.tar.gz
    tar zxf ${base}-heroku-extras.tar.gz
    mv opt/gerbil ${BUILD_DIR}/.gerbil
    rm -rf *.tar.gz opt

    # Update the cache
    rsync -a ${BUILD_DIR}/.gerbil/ ${CACHE_DIR}/.gerbil/

    # Mark Gerbil as installed in the cache
    mkdir -p ${CACHE_DIR}/installed
    echo ${GERBIL_VERSION} > $installed_gerbil
}

function install_gerbil () {
    installed_gerbil=${CACHE_DIR}/installed/gerbil
    installed_version="$(cat $installed_gerbil 2> /dev/null || :)"
    echo installed_gerbil=${installed_gerbil} installed_version=${installed_version} GERBIL_VERSION=${GERBIL_VERSION}
    if [ "${installed_version}" = "${GERBIL_VERSION}" ] ; then
        log_title "Copying pre-installed Gerbil ${GERBIL_VERSION} ..."
        rsync -a ${CACHE_DIR}/.gerbil/ ${BUILD_DIR}/.gerbil/
    else
        rm -rf ${CACHE_DIR}/.gerbil
        cd ${TMPDIR}
        case "${MACHTYPE}" in
            x86_64-pc-linux-gnu)
                install_gerbil_from_release
                ;;
            *)
                abort "Unsupported machine type ${MACHTYPE}"
                ;;
        esac
    fi
    log_footer
}

# TODO: cache dependencies, etc.?
function build_dependencies () {
    log_title "Building dependencies ..."
    cd ${BUILD_DIR}
    gxpkg deps --install |& log_format
    gxpkg deps --update |& log_format
    rsync -a ${BUILD_DIR}/.gerbil/ ${CACHE_DIR}/.gerbil/
    log_footer
}

function build_application () {
    log_title "Building application ..."
    cd ${BUILD_DIR}
    gxpkg build |& log_format
    #^ should be the same as: ./build.ss |& log_format
    rsync -a ${BUILD_DIR}/.gerbil/ ${CACHE_DIR}/.gerbil/
    log_footer
}

function build_profile () {
    log_title "Building profile ..."
    cd ${BUILD_DIR}
    mkdir -p .profile.d
    cat > .profile.d/gerbil.sh <<"EOF"
export GERBIL_PATH=$HOME/.gerbil
export PATH=$GERBIL_PATH/bin:$PATH
export LD_LIBRARY_PATH=$GERBIL_PATH/lib:$LD_LIBRARY_PATH
export GERBIL_GSC="${GERBIL_PATH}/bin/gsc"
export GAMBOPT="~~=${GERBIL_PATH}"
#env
#ls -la $HOME
EOF
    log_footer
}

print_environment
install_gerbil
build_dependencies
build_application
build_profile
